import telebot
from telebot import types
from config import TELEGRAM_TOKEN, PRICING, WELCOME_MESSAGE, ADMIN_ID, USDT_WALLET_ADDRESS
from datetime import datetime, timedelta

bot = telebot.TeleBot(TELEGRAM_TOKEN)
user_subscriptions = {}  # user_id: expiry_datetime

def is_subscribed(user_id):
    if user_id == ADMIN_ID:
        return True
    expiry = user_subscriptions.get(user_id)
    return expiry and datetime.now() < expiry

@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üì° ÿ≥€å⁄ØŸÜÿßŸÑ", "üí≥ ÿÆÿ±€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄©", "üÜî ÿ¢€åÿØ€å ÿßÿØŸÖ€åŸÜ")
    bot.send_message(message.chat.id, WELCOME_MESSAGE, reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(func=lambda msg: msg.text == "üí≥ ÿÆÿ±€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄©")
def show_subscription_options(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ŸÖÿßŸáÿßŸÜŸá", "ÿ¥ÿ¥ ŸÖÿßŸáŸá", "ÿ≥ÿßŸÑÿßŸÜŸá")
    bot.send_message(message.chat.id, "ŸÑÿ∑ŸÅÿß ŸÜŸàÿπ ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text in ["ŸÖÿßŸáÿßŸÜŸá", "ÿ¥ÿ¥ ŸÖÿßŸáŸá", "ÿ≥ÿßŸÑÿßŸÜŸá"])
def handle_subscription_selection(message):
    duration_map = {
        "ŸÖÿßŸáÿßŸÜŸá": "monthly",
        "ÿ¥ÿ¥ ŸÖÿßŸáŸá": "6months",
        "ÿ≥ÿßŸÑÿßŸÜŸá": "yearly"
    }
    key = duration_map[message.text]
    price = PRICING[key]["amount"]
    bot.send_message(message.chat.id, f"Ÿáÿ≤€åŸÜŸá ÿßÿ¥ÿ™ÿ±ÿß⁄© {price} ÿ™ÿ™ÿ± ŸÖ€å‚Äåÿ®ÿßÿ¥ÿØ.\nŸÑÿ∑ŸÅÿßŸã ŸÖÿ®ŸÑÿ∫ ÿ±ÿß ÿ®Ÿá ÿ¢ÿØÿ±ÿ≥ ÿ≤€åÿ± Ÿæÿ±ÿØÿßÿÆÿ™ ⁄©ÿ±ÿØŸá Ÿà ÿ±ÿ≥€åÿØ ÿ±ÿß ÿ®ÿ±ÿß€å ÿßÿØŸÖ€åŸÜ ÿßÿ±ÿ≥ÿßŸÑ ŸÜŸÖÿß€å€åÿØ:\n\n`{USDT_WALLET_ADDRESS}`", parse_mode='Markdown')

@bot.message_handler(func=lambda msg: msg.text == "üì° ÿ≥€å⁄ØŸÜÿßŸÑ")
def signal_menu(message):
    if not is_subscribed(message.from_user.id):
        bot.send_message(message.chat.id, "‚ùå ÿ¥ŸÖÿß ÿßÿ¥ÿ™ÿ±ÿß⁄© ŸÅÿπÿßŸÑ€å ŸÜÿØÿßÿ±€åÿØ. ŸÑÿ∑ŸÅÿßŸã ÿßÿ≤ ⁄Øÿ≤€åŸÜŸá ÿÆÿ±€åÿØ ÿßÿ¥ÿ™ÿ±ÿß⁄© ÿßÿ≥ÿ™ŸÅÿßÿØŸá ⁄©ŸÜ€åÿØ.")
        return
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ŸáŸàÿ¥ŸÖŸÜÿØ", "ÿØÿ≥ÿ™€å")
    bot.send_message(message.chat.id, "ŸÑÿ∑ŸÅÿßŸã ŸÜŸàÿπ ÿØÿ±€åÿßŸÅÿ™ ÿ≥€å⁄ØŸÜÿßŸÑ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ:", reply_markup=markup)

@bot.message_handler(func=lambda msg: msg.text == "ŸáŸàÿ¥ŸÖŸÜÿØ")
def smart_signal(message):
    bot.send_message(message.chat.id,
                     "Gold BUY\nENTRY: 3326-3321\nSL: 3319\nTP1: 3328\nTP2: 3332\nTP3: 3333\nLeverage: 10x")

@bot.message_handler(func=lambda msg: msg.text == "ÿØÿ≥ÿ™€å")
def ask_symbol(message):
    msg = bot.send_message(message.chat.id, "ŸÜÿßŸÖ ÿßÿ±ÿ≤ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ (ŸÖÿ´ŸÑÿßŸã BTC):")
    bot.register_next_step_handler(msg, send_manual_signal)

def send_manual_signal(message):
    symbol = message.text.upper()
    signal = f"{symbol} BUY\nENTRY: ŸÇ€åŸÖÿ™ ŸÖŸÜÿßÿ≥ÿ® ŸÅÿπŸÑ€å\nSL: Ÿæÿ¥ÿ™€åÿ®ÿßŸÜ€å ŸÜÿ≤ÿØ€å⁄©\nTP1: ŸÖŸÇÿßŸàŸÖÿ™ ÿßŸàŸÑ\nTP2: ŸÖŸÇÿßŸàŸÖÿ™ ÿØŸàŸÖ\nTP3: ŸÖŸÇÿßŸàŸÖÿ™ ÿ≥ŸàŸÖ\nLeverage: 5x"
    bot.send_message(message.chat.id, signal)

@bot.message_handler(func=lambda msg: msg.text == "üÜî ÿ¢€åÿØ€å ÿßÿØŸÖ€åŸÜ")
def show_admin_id(message):
    bot.send_message(message.chat.id, f"ÿ¢€åÿØ€å ÿßÿØŸÖ€åŸÜ ÿ®ÿ±ÿß€å ÿßÿ±ÿ≥ÿßŸÑ ÿ±ÿ≥€åÿØ: {ADMIN_ID}", parse_mode='Markdown')

@bot.message_handler(commands=['activate'])
def activate_user(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, user_id, days = message.text.split()
        user_subscriptions[int(user_id)] = datetime.now() + timedelta(days=int(days))
        bot.send_message(message.chat.id, f"ÿßÿ¥ÿ™ÿ±ÿß⁄© ⁄©ÿßÿ±ÿ®ÿ± {user_id} ÿ®ÿ±ÿß€å {days} ÿ±Ÿàÿ≤ ŸÅÿπÿßŸÑ ÿ¥ÿØ.")
    except:
        bot.send_message(message.chat.id, "ŸÅÿ±ŸÖÿ™ ÿßÿ¥ÿ™ÿ®ÿßŸá. ÿßÿ≥ÿ™ŸÅÿßÿØŸá ÿßÿ≤ ÿØÿ≥ÿ™Ÿàÿ±:\n/activate <user_id> <days>")

print("ÿ±ÿ®ÿßÿ™ ŸÅÿπÿßŸÑ ÿßÿ≥ÿ™...")
bot.infinity_polling()
